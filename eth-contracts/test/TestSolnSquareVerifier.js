// Test if a new solution can be added for contract - SolnSquareVerifier

// Test if an ERC721 token can be minted for contract - SolnSquareVerifier

var SolnSquareVerifier = artifacts.require('SolnSquareVerifier');
var SquareVerifier = artifacts.require('SquareVerifier');
var zokratesProof = require('../../zokrates/code/square/proof.json');

contract('TestSolnSquareVerifier', accounts => {
    const account_one = accounts[0];
    const account_two = accounts[1];

    describe('Test SolnSquareVerifier', function(){
        beforeEach(async function() {
            let squareVerifier = await SquareVerifier.new({from: account_one})
            this.contract = await SolnSquareVerifier.new(squareVerifier.address, {from: account_one})
        });

        it('tests if a new solution can be added for contract', async function () {

    	// verifier generated by zokrates
        //const squareVerifier = await SquareVerifier.deployed({ from: account_one });
        //  SolnSquareVerifier contract
        //const solnSquareVerifier = await SolnSquareVerifier.new(squareVerifier.address, { from: account_one });

    	const {a, b, c} = zokratesProof.proof;

        let solutionKey = await this.contract.getSolutionKey(a, b, c, zokratesProof.inputs);
//console.log(solutionKey.tx);
        let addedSolution = await this.contract.addSolution(solutionKey.tx, 1, account_two);
//console.log(addedSolution.logs[0].event);
        assert.equal(addedSolution.logs[0].event, 'solutionAdded', "Could not add a solution.");


        })

        it('tests if an ERC721 token can be minted for contract', async function () {

    	// verifier generated by zokrates
        //const squareVerifier = await SquareVerifier.deployed({ from: account_one });

        //  SolnSquareVerifier contract
        //const solnSquareVerifier = await SolnSquareVerifier.new(squareVerifier.address, { from: account_one });

    	const {a, b, c} = zokratesProof.proof;
        const input = zokratesProof.inputs;
        let mintingSucceded = await this.contract.mintIt(account_two, 2, a, b, c, input, { from: account_one });
        
        assert.equal(mintingSucceded, true, "Could not mint the token.");
        })
    })
})